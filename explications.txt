code .
rm -rf test/
rm src/app.controller.spec.ts


touch .env
sudo docker-compose up

yarn add typeorm @nestjs/typeorm
yarn add dotenv

tmux
yarn start:dev

---------------------------
docker-compose ps
sudo docker-compose up -d 
or 
docker start postgres

touch src/database-connection.service.ts
on import la database-connection dans App.module.ts

//on installle le driver de postgres
yarn add pg 

nest g module auth 
nest g service auth 
nest g controller auth 
rm src/auth/*.spec.ts

ajout de app.setGlobalPrefix('api'); dans main.ts

mkdir src/models
touch src/models/user.dto.ts  
yarn add class-validator class-transformer

mkdir src/entities
touch src/entities/user.entity.ts
yarn add bcryptjs
yarn add -D @types/bcryptjs
touch src/entities/abstract-entity.ts
-->on importe le UserEntity dans le auth.module.ts
    imports:[ TypeOrmModule.forFeature([UserEntity])],

yarn add @nestjs/passport passport passport-local
yarn add  @nestjs/passport passport @nestjs/jwt passport-jwt
yarn add -D @types/passport-jwt @types/passport
-->configuration de auth.module.ts

touch jwt.strategy.ts
mv jwt.strategy.ts src/auth/jwt.strategy.ts
mv src/models/user.dto.ts src/models/user.models.ts
Ajout de JwtStrategy dans providers: [AuthService,JwtStrategy]  et dans exports de auth.module

--Â»

nest g module user 
nest g service user 
nest g controller user
nest g controller user/profile
mv src/user/profile/profile.controller.ts src/user/profile.controller.ts
rm -rf src/user/profile
rm src/user/*.spec.ts
touch src/auth/user.decorator.ts